{
  
    
        "post0": {
            "title": "My page",
            "content": "import pandas as pd import numpy as np . data = np.random.randint(0,500,(5,5)) data . array([[400, 134, 169, 172, 101], [478, 485, 301, 134, 249], [151, 256, 407, 465, 99], [139, 65, 357, 206, 499], [138, 127, 369, 140, 227]]) . Cb1 = pd.DataFrame(data) Cb1 . 0 1 2 3 4 . 0 400 | 134 | 169 | 172 | 101 | . 1 478 | 485 | 301 | 134 | 249 | . 2 151 | 256 | 407 | 465 | 99 | . 3 139 | 65 | 357 | 206 | 499 | . 4 138 | 127 | 369 | 140 | 227 | . Cb2 = pd.DataFrame(data) Cb2 . 0 1 2 3 4 . 0 400 | 134 | 169 | 172 | 101 | . 1 478 | 485 | 301 | 134 | 249 | . 2 151 | 256 | 407 | 465 | 99 | . 3 139 | 65 | 357 | 206 | 499 | . 4 138 | 127 | 369 | 140 | 227 | . Cb3 = pd.DataFrame(data) Cb3 . 0 1 2 3 4 . 0 400 | 134 | 169 | 172 | 101 | . 1 478 | 485 | 301 | 134 | 249 | . 2 151 | 256 | 407 | 465 | 99 | . 3 139 | 65 | 357 | 206 | 499 | . 4 138 | 127 | 369 | 140 | 227 | .",
            "url": "https://veroberg.github.io/my_first_blog/blog/2021/01/21/Post-Two.html",
            "relUrl": "/blog/2021/01/21/Post-Two.html",
            "date": " • Jan 21, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "My page",
            "content": "import pandas as pd import numpy as np . data = np.random.randint(0,800,(3,3)) data . array([[442, 100, 198], [664, 201, 719], [197, 424, 445]]) . Cc1 = pd.DataFrame(data) Cc1 . 0 1 2 . 0 442 | 100 | 198 | . 1 664 | 201 | 719 | . 2 197 | 424 | 445 | . Cc2 = pd.DataFrame(data) Cc2 . 0 1 2 . 0 442 | 100 | 198 | . 1 664 | 201 | 719 | . 2 197 | 424 | 445 | . Cc3 = pd.DataFrame(data) Cc3 . 0 1 2 . 0 442 | 100 | 198 | . 1 664 | 201 | 719 | . 2 197 | 424 | 445 | .",
            "url": "https://veroberg.github.io/my_first_blog/blog/2021/01/21/Post-Three.html",
            "relUrl": "/blog/2021/01/21/Post-Three.html",
            "date": " • Jan 21, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "My page",
            "content": "import pandas as pd import numpy as np . data = np.random.randint(0,1000,(10,10)) data . array([[489, 722, 176, 403, 404, 517, 190, 260, 669, 277], [561, 271, 693, 720, 445, 474, 808, 686, 398, 282], [793, 182, 942, 649, 843, 132, 77, 641, 98, 700], [548, 438, 131, 650, 102, 933, 494, 762, 813, 608], [190, 354, 97, 397, 303, 623, 833, 168, 618, 126], [435, 123, 542, 135, 418, 742, 522, 126, 12, 976], [152, 833, 352, 131, 151, 638, 117, 390, 184, 758], [171, 696, 85, 675, 108, 408, 922, 440, 562, 443], [789, 777, 107, 144, 649, 627, 62, 554, 582, 455], [606, 668, 62, 623, 900, 140, 273, 145, 490, 812]]) . Ca1 = pd.DataFrame(data) Ca1 . 0 1 2 3 4 5 6 7 8 9 . 0 489 | 722 | 176 | 403 | 404 | 517 | 190 | 260 | 669 | 277 | . 1 561 | 271 | 693 | 720 | 445 | 474 | 808 | 686 | 398 | 282 | . 2 793 | 182 | 942 | 649 | 843 | 132 | 77 | 641 | 98 | 700 | . 3 548 | 438 | 131 | 650 | 102 | 933 | 494 | 762 | 813 | 608 | . 4 190 | 354 | 97 | 397 | 303 | 623 | 833 | 168 | 618 | 126 | . 5 435 | 123 | 542 | 135 | 418 | 742 | 522 | 126 | 12 | 976 | . 6 152 | 833 | 352 | 131 | 151 | 638 | 117 | 390 | 184 | 758 | . 7 171 | 696 | 85 | 675 | 108 | 408 | 922 | 440 | 562 | 443 | . 8 789 | 777 | 107 | 144 | 649 | 627 | 62 | 554 | 582 | 455 | . 9 606 | 668 | 62 | 623 | 900 | 140 | 273 | 145 | 490 | 812 | . Ca2 = pd.DataFrame(data) Ca2 . 0 1 2 3 4 5 6 7 8 9 . 0 489 | 722 | 176 | 403 | 404 | 517 | 190 | 260 | 669 | 277 | . 1 561 | 271 | 693 | 720 | 445 | 474 | 808 | 686 | 398 | 282 | . 2 793 | 182 | 942 | 649 | 843 | 132 | 77 | 641 | 98 | 700 | . 3 548 | 438 | 131 | 650 | 102 | 933 | 494 | 762 | 813 | 608 | . 4 190 | 354 | 97 | 397 | 303 | 623 | 833 | 168 | 618 | 126 | . 5 435 | 123 | 542 | 135 | 418 | 742 | 522 | 126 | 12 | 976 | . 6 152 | 833 | 352 | 131 | 151 | 638 | 117 | 390 | 184 | 758 | . 7 171 | 696 | 85 | 675 | 108 | 408 | 922 | 440 | 562 | 443 | . 8 789 | 777 | 107 | 144 | 649 | 627 | 62 | 554 | 582 | 455 | . 9 606 | 668 | 62 | 623 | 900 | 140 | 273 | 145 | 490 | 812 | . Ca3 = pd.DataFrame(data) Ca3 . 0 1 2 3 4 5 6 7 8 9 . 0 489 | 722 | 176 | 403 | 404 | 517 | 190 | 260 | 669 | 277 | . 1 561 | 271 | 693 | 720 | 445 | 474 | 808 | 686 | 398 | 282 | . 2 793 | 182 | 942 | 649 | 843 | 132 | 77 | 641 | 98 | 700 | . 3 548 | 438 | 131 | 650 | 102 | 933 | 494 | 762 | 813 | 608 | . 4 190 | 354 | 97 | 397 | 303 | 623 | 833 | 168 | 618 | 126 | . 5 435 | 123 | 542 | 135 | 418 | 742 | 522 | 126 | 12 | 976 | . 6 152 | 833 | 352 | 131 | 151 | 638 | 117 | 390 | 184 | 758 | . 7 171 | 696 | 85 | 675 | 108 | 408 | 922 | 440 | 562 | 443 | . 8 789 | 777 | 107 | 144 | 649 | 627 | 62 | 554 | 582 | 455 | . 9 606 | 668 | 62 | 623 | 900 | 140 | 273 | 145 | 490 | 812 | .",
            "url": "https://veroberg.github.io/my_first_blog/blog/2021/01/20/Post-One.html",
            "relUrl": "/blog/2021/01/20/Post-One.html",
            "date": " • Jan 20, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://veroberg.github.io/my_first_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://veroberg.github.io/my_first_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://veroberg.github.io/my_first_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}