{
  
    
        "post0": {
            "title": "My page",
            "content": "import pandas as pd import numpy as np . data = np.random.randint(0,1000,(10,10)) data . array([[459, 658, 74, 998, 715, 960, 543, 855, 237, 476], [707, 278, 703, 247, 995, 784, 129, 530, 659, 648], [195, 90, 263, 215, 509, 445, 112, 280, 545, 99], [489, 629, 258, 937, 692, 682, 172, 290, 695, 405], [603, 130, 143, 721, 535, 224, 904, 834, 548, 650], [276, 808, 749, 87, 281, 129, 743, 564, 195, 818], [650, 95, 869, 80, 489, 519, 479, 650, 561, 667], [116, 990, 712, 180, 446, 543, 17, 331, 489, 918], [955, 57, 815, 733, 29, 196, 800, 261, 883, 240], [794, 633, 406, 778, 665, 982, 854, 74, 210, 481]]) . Ca1 = pd.DataFrame(data) Ca1 . 0 1 2 3 4 5 6 7 8 9 . 0 459 | 658 | 74 | 998 | 715 | 960 | 543 | 855 | 237 | 476 | . 1 707 | 278 | 703 | 247 | 995 | 784 | 129 | 530 | 659 | 648 | . 2 195 | 90 | 263 | 215 | 509 | 445 | 112 | 280 | 545 | 99 | . 3 489 | 629 | 258 | 937 | 692 | 682 | 172 | 290 | 695 | 405 | . 4 603 | 130 | 143 | 721 | 535 | 224 | 904 | 834 | 548 | 650 | . 5 276 | 808 | 749 | 87 | 281 | 129 | 743 | 564 | 195 | 818 | . 6 650 | 95 | 869 | 80 | 489 | 519 | 479 | 650 | 561 | 667 | . 7 116 | 990 | 712 | 180 | 446 | 543 | 17 | 331 | 489 | 918 | . 8 955 | 57 | 815 | 733 | 29 | 196 | 800 | 261 | 883 | 240 | . 9 794 | 633 | 406 | 778 | 665 | 982 | 854 | 74 | 210 | 481 | . Ca2 = pd.DataFrame(data) Ca2 . 0 1 2 3 4 5 6 7 8 9 . 0 459 | 658 | 74 | 998 | 715 | 960 | 543 | 855 | 237 | 476 | . 1 707 | 278 | 703 | 247 | 995 | 784 | 129 | 530 | 659 | 648 | . 2 195 | 90 | 263 | 215 | 509 | 445 | 112 | 280 | 545 | 99 | . 3 489 | 629 | 258 | 937 | 692 | 682 | 172 | 290 | 695 | 405 | . 4 603 | 130 | 143 | 721 | 535 | 224 | 904 | 834 | 548 | 650 | . 5 276 | 808 | 749 | 87 | 281 | 129 | 743 | 564 | 195 | 818 | . 6 650 | 95 | 869 | 80 | 489 | 519 | 479 | 650 | 561 | 667 | . 7 116 | 990 | 712 | 180 | 446 | 543 | 17 | 331 | 489 | 918 | . 8 955 | 57 | 815 | 733 | 29 | 196 | 800 | 261 | 883 | 240 | . 9 794 | 633 | 406 | 778 | 665 | 982 | 854 | 74 | 210 | 481 | . Ca3 = pd.DataFrame(data) Ca3 . 0 1 2 3 4 5 6 7 8 9 . 0 459 | 658 | 74 | 998 | 715 | 960 | 543 | 855 | 237 | 476 | . 1 707 | 278 | 703 | 247 | 995 | 784 | 129 | 530 | 659 | 648 | . 2 195 | 90 | 263 | 215 | 509 | 445 | 112 | 280 | 545 | 99 | . 3 489 | 629 | 258 | 937 | 692 | 682 | 172 | 290 | 695 | 405 | . 4 603 | 130 | 143 | 721 | 535 | 224 | 904 | 834 | 548 | 650 | . 5 276 | 808 | 749 | 87 | 281 | 129 | 743 | 564 | 195 | 818 | . 6 650 | 95 | 869 | 80 | 489 | 519 | 479 | 650 | 561 | 667 | . 7 116 | 990 | 712 | 180 | 446 | 543 | 17 | 331 | 489 | 918 | . 8 955 | 57 | 815 | 733 | 29 | 196 | 800 | 261 | 883 | 240 | . 9 794 | 633 | 406 | 778 | 665 | 982 | 854 | 74 | 210 | 481 | .",
            "url": "https://veroberg.github.io/my_first_blog/blog/2021/01/21/Post-One.html",
            "relUrl": "/blog/2021/01/21/Post-One.html",
            "date": " • Jan 21, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://veroberg.github.io/my_first_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://veroberg.github.io/my_first_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://veroberg.github.io/my_first_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}